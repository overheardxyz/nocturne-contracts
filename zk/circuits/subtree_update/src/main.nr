use dep::std;

struct MembershipProof {
    root: Field,
    leaf: Field,
    siblings:[Field; 42],
    pathIndices: Field
}

fn main(
    // accumulatorHash : pub Field, 
    // encodedPathAndHash : pub Field, 
    // oldRoot: pub Field, 
    // newRoot: pub Field,
    subtreeMembershipProof: MembershipProof,
    emptySubtreeMembershipProof: MembershipProof,
    // notes: [Field; 16],
    // leaves: [Field;16],
) {
    
    assert(check_membership(subtreeMembershipProof.root,subtreeMembershipProof.leaf,subtreeMembershipProof.pathIndices,subtreeMembershipProof.siblings) == true);
    assert(check_membership(emptySubtreeMembershipProof.root,emptySubtreeMembershipProof.leaf,emptySubtreeMembershipProof.pathIndices,emptySubtreeMembershipProof.siblings) == true);
}

fn check_membership (_root : Field, _leaf : Field, _path_indices : Field, _siblings: [Field; 42]) -> bool {
    _root == compute_root_from_leaf(_leaf,_path_indices,_siblings)
}

fn compute_root_from_leaf (_leaf : Field, _path_indices : Field, _siblings: [Field; 42]) -> Field {
    let indexes = _path_indices.to_be_bits((31 as u32));
    let mut current = _leaf;
    let mut tmp: [Field; 4] = [0; 4];
    for i in 0..14 {
        let index = (indexes[i*2] as Field)*2 + (indexes[i*2+1] as Field);
        std::println(index);
        if index == 0 {
            tmp[0] = current;
            tmp[1] = _siblings[i*3];
            tmp[2] = _siblings[i*3+1];
            tmp[3] = _siblings[i*3+2];
        } else if index == 1 {
            tmp[0] = _siblings[i*3];
            tmp[1] = current;
            tmp[2] = _siblings[i*3+1];
            tmp[3] = _siblings[i*3+2];
        } else if index == 2 {
            tmp[0] = _siblings[i*3];
            tmp[1] = _siblings[i*3+1];
            tmp[2] = current;
            tmp[3] = _siblings[i*3+2];
        } else {
            tmp[0] = _siblings[i*3];
            tmp[1] = _siblings[i*3+1];
            tmp[2] = _siblings[i*3+2];
            tmp[3] = current;
        }
        current = std::hash::poseidon::bn254::hash_4(tmp); 
    }
    current
}

#[test]
fn test_subtree_check_membership () {
    let subtreeMembershipProof = MembershipProof {
        root: 14751455653696551972598626902324480412263087291693189381022091614544374105930,
        leaf: 19308544306448469788048112111319950102602262858931723855938361542409857985469,
        siblings: [
            13867732332339151465497925642082178974038372652152621168903203076445231043372,
            13867732332339151465497925642082178974038372652152621168903203076445231043372,
            13867732332339151465497925642082178974038372652152621168903203076445231043372,
            12482638920258770416445069396084160696706909713694235655126678204295434816978,
            12482638920258770416445069396084160696706909713694235655126678204295434816978,
            12482638920258770416445069396084160696706909713694235655126678204295434816978,
            7166733538749145097044835779501529184583030407883999216862943858482812218900,
            7166733538749145097044835779501529184583030407883999216862943858482812218900,
            7166733538749145097044835779501529184583030407883999216862943858482812218900,
            8105111289764799261118761045803039859349056024712051667352901171623997110135,
            8105111289764799261118761045803039859349056024712051667352901171623997110135,
            8105111289764799261118761045803039859349056024712051667352901171623997110135,
            12848805869306190323636404927060402794679102677145469772979902111093008224192,
            12848805869306190323636404927060402794679102677145469772979902111093008224192,
            12848805869306190323636404927060402794679102677145469772979902111093008224192,
            19558787758992270753559504143061140356952449644512620323370068802764968601369,
            19558787758992270753559504143061140356952449644512620323370068802764968601369,
            19558787758992270753559504143061140356952449644512620323370068802764968601369,
            12390767703375336354386586159705861191789202938804190201641874256578171062369,
            12390767703375336354386586159705861191789202938804190201641874256578171062369,
            12390767703375336354386586159705861191789202938804190201641874256578171062369,
            3137401155887568054342462681996579107920888172758509452834253176053621234802,
            3137401155887568054342462681996579107920888172758509452834253176053621234802,
            3137401155887568054342462681996579107920888172758509452834253176053621234802,
            17246586734894168265112266963200606530710644744521791774170567941230295667185,
            17246586734894168265112266963200606530710644744521791774170567941230295667185,
            17246586734894168265112266963200606530710644744521791774170567941230295667185,
            3579753298464347968175446964060349222759138522794226670675282662699379573112,
            3579753298464347968175446964060349222759138522794226670675282662699379573112,
            3579753298464347968175446964060349222759138522794226670675282662699379573112,
            5502479177772891194542009540012941542204094004749813714118505924674776464255,
            5502479177772891194542009540012941542204094004749813714118505924674776464255,
            5502479177772891194542009540012941542204094004749813714118505924674776464255,
            12023797624857124786560101326438313436313441099989701132514668150307392465028,
            12023797624857124786560101326438313436313441099989701132514668150307392465028,
            12023797624857124786560101326438313436313441099989701132514668150307392465028,
            10263213503339600742925101484637942948945771652266922481751100499603709320717,
            10263213503339600742925101484637942948945771652266922481751100499603709320717,
            10263213503339600742925101484637942948945771652266922481751100499603709320717,
            20734118650853257426634229445255987190193218607444720047392808113569367837624,
            20734118650853257426634229445255987190193218607444720047392808113569367837624,
            20734118650853257426634229445255987190193218607444720047392808113569367837624
        ],
        pathIndices: 268435456
    };
    let res = check_membership(subtreeMembershipProof.root,subtreeMembershipProof.leaf,subtreeMembershipProof.pathIndices,subtreeMembershipProof.siblings);
    std::println(res);
}

#[test]
fn test_empty_subtree_check_membership () {
    let emptySubtreeMembershipProof = MembershipProof {
        root: 9533201250583817767896570092866591469094150406835227552485691564931228351592,
        leaf: 13867732332339151465497925642082178974038372652152621168903203076445231043372,
        siblings: [
            13867732332339151465497925642082178974038372652152621168903203076445231043372,
            13867732332339151465497925642082178974038372652152621168903203076445231043372,
            13867732332339151465497925642082178974038372652152621168903203076445231043372,
            12482638920258770416445069396084160696706909713694235655126678204295434816978,
            12482638920258770416445069396084160696706909713694235655126678204295434816978,
            12482638920258770416445069396084160696706909713694235655126678204295434816978,
            7166733538749145097044835779501529184583030407883999216862943858482812218900,
            7166733538749145097044835779501529184583030407883999216862943858482812218900,
            7166733538749145097044835779501529184583030407883999216862943858482812218900,
            8105111289764799261118761045803039859349056024712051667352901171623997110135,
            8105111289764799261118761045803039859349056024712051667352901171623997110135,
            8105111289764799261118761045803039859349056024712051667352901171623997110135,
            12848805869306190323636404927060402794679102677145469772979902111093008224192,
            12848805869306190323636404927060402794679102677145469772979902111093008224192,
            12848805869306190323636404927060402794679102677145469772979902111093008224192,
            19558787758992270753559504143061140356952449644512620323370068802764968601369,
            19558787758992270753559504143061140356952449644512620323370068802764968601369,
            19558787758992270753559504143061140356952449644512620323370068802764968601369,
            12390767703375336354386586159705861191789202938804190201641874256578171062369,
            12390767703375336354386586159705861191789202938804190201641874256578171062369,
            12390767703375336354386586159705861191789202938804190201641874256578171062369,
            3137401155887568054342462681996579107920888172758509452834253176053621234802,
            3137401155887568054342462681996579107920888172758509452834253176053621234802,
            3137401155887568054342462681996579107920888172758509452834253176053621234802,
            17246586734894168265112266963200606530710644744521791774170567941230295667185,
            17246586734894168265112266963200606530710644744521791774170567941230295667185,
            17246586734894168265112266963200606530710644744521791774170567941230295667185,
            3579753298464347968175446964060349222759138522794226670675282662699379573112,
            3579753298464347968175446964060349222759138522794226670675282662699379573112,
            3579753298464347968175446964060349222759138522794226670675282662699379573112,
            5502479177772891194542009540012941542204094004749813714118505924674776464255,
            5502479177772891194542009540012941542204094004749813714118505924674776464255,
            5502479177772891194542009540012941542204094004749813714118505924674776464255,
            12023797624857124786560101326438313436313441099989701132514668150307392465028,
            12023797624857124786560101326438313436313441099989701132514668150307392465028,
            12023797624857124786560101326438313436313441099989701132514668150307392465028,
            10263213503339600742925101484637942948945771652266922481751100499603709320717,
            10263213503339600742925101484637942948945771652266922481751100499603709320717,
            10263213503339600742925101484637942948945771652266922481751100499603709320717,
            20734118650853257426634229445255987190193218607444720047392808113569367837624,
            20734118650853257426634229445255987190193218607444720047392808113569367837624,
            20734118650853257426634229445255987190193218607444720047392808113569367837624
        ],
        pathIndices: 268435456
    };
    let res = check_membership(emptySubtreeMembershipProof.root,emptySubtreeMembershipProof.leaf,emptySubtreeMembershipProof.pathIndices,emptySubtreeMembershipProof.siblings);
    std::println(res);
}


