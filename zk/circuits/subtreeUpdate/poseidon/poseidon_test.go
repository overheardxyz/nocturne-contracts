package poseidon

import (
	"crypto/sha256"
	"fmt"
	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/test"
	"math/big"
	"testing"
)

type circuitPoseidon struct {
	A    [4]frontend.Variable `gnark:",public"`
	Hash frontend.Variable    `gnark:",public"`
}

func (t *circuitPoseidon) Define(api frontend.API) error {
	hash := Poseidon(api, t.A[:])
	api.AssertIsEqual(hash, t.Hash)
	return nil
}

func TestPoseidon(t *testing.T) {
	assert := test.NewAssert(t)
	var circuit circuitPoseidon

	assert.ProverSucceeded(&circuit, &circuitPoseidon{
		A: [4]frontend.Variable{
			"7559412695850999704437639814226631134667359700514660715427262528648684612384",
			"66128905217727820142075711671179697108908215459957692935244063164243782161424",
			"51015742989614192140374653588448216776344032110315281841496138794886522140476",
			"35122383026158949466484037373710698093278849499198161694631609784776227649041",
		},
		Hash: "872275818087525509595217110752724528741045789284806621653152938717973556562",
	}, test.WithCurves(ecc.BN254), test.WithBackends(backend.GROTH16))
}

func TestStringToBytes(t *testing.T) {
	pre := [16]string{
		"7559412695850999704437639814226631134667359700514660715427262528648684612384",
		"66128905217727820142075711671179697108908215459957692935244063164243782161424",
		"51015742989614192140374653588448216776344032110315281841496138794886522140476",
		"35122383026158949466484037373710698093278849499198161694631609784776227649041",
		"26172153391189409300153675552195806917108259526780793769448239894068277983117",
		"26319945699020872042776764262800211039811709625022690029869433243912894238514",
		"85459787920741173308529179304076764583420917452546478748737995277072485407899",
		"37824474589860659728395896987471423117349358731852046326799624553171445743149",
		"61194402916979300094031158454825880129228850504669718400883285170758259346137",
		"24246882173524206786121934947990875280633571158623508995012743986254503068477",
		"93199772650225608593183888507906173669398210074847791089995208298919581733292",
		"33909163889869673678628757617712328003205266681277740626071514924998877887543",
		"57565043458143669655443451912855736172750697736668570413272031819358780748047",
		"37243082771427767710089206757934373481061954243301630231967571484585860082658",
		"16563559798946351326855328924389131968545894673507955726309781333266729822892",
		"48994785319657803905781873709543292037955196759232529867686143523322370022071",
	}
	h := sha256.New()
	for t := 0; t < 16; t++ {
		i := new(big.Int)
		i.SetString(pre[t], 10)
		h.Write(i.Bytes())
	}
	res := new(big.Int)
	fmt.Println(res.SetBytes(h.Sum(nil)))
}

//type TestCircuit struct {
//	EncodedPathAndHash frontend.Variable
//	AccumulatorHash frontend.Variable
//}
//
//func (t *TestCircuit) Define(api frontend.API) error {
//
//}

//func TestGnarkOperator(t *testing.T) {
//	EncodedPathAndHash := frontend.Variable("268435456")
//	AccumulatorHash := frontend.Variable("1718694914574393558977766615778936430810912460753664150190225630968184786885")
//
//	hi:=
//}

func TestPowN(t *testing.T) {
	i := new(big.Int)
	i.Exp(big.NewInt(2), big.NewInt(253), big.NewInt(0))
	fmt.Println(i)
}
